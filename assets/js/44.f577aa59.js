(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{610:function(t,e,s){"use strict";s.r(e);var v=s(6),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[t._v("Redis简介")]),t._v(" "),s("li",[t._v("Redis的配置")]),t._v(" "),s("li",[t._v("Redis的使用")]),t._v(" "),s("li",[t._v("Redis操作系列方法")]),t._v(" "),s("li",[t._v("Redis扩展")]),t._v(" "),s("li",[t._v("Redis集群")])]),t._v(" "),s("h2",{attrs:{id:"redis简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis简介"}},[t._v("#")]),t._v(" Redis简介")]),t._v(" "),s("p",[t._v("Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。")]),t._v(" "),s("p",[t._v("Redis 与其他 key - value 缓存产品有以下三个特点：")]),t._v(" "),s("ul",[s("li",[t._v("Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。")]),t._v(" "),s("li",[t._v("Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。")]),t._v(" "),s("li",[t._v("Redis支持数据的备份，即master-slave模式的数据备份。")])]),t._v(" "),s("p",[t._v("Redis 优势:")]),t._v(" "),s("ul",[s("li",[t._v("性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。")]),t._v(" "),s("li",[t._v("丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。")]),t._v(" "),s("li",[t._v("原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。")]),t._v(" "),s("li",[t._v("丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。")])]),t._v(" "),s("h2",{attrs:{id:"redis的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的配置"}},[t._v("#")]),t._v(" Redis的配置")]),t._v(" "),s("p",[t._v("在使用 Redis 之前，先进行 Redis 配置，配置内容如下：")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("127.0.0.1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("xxxx")]),t._v("\n")])])]),s("p",[t._v("Redis 还支持如下的更多功能的配置：")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.port")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("6379")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.timeout")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("2000")]),t._v("\njboot.redis.database\njboot.redis.clientName\njboot.redis.testOnCreate\njboot.redis.testOnBorrow\njboot.redis.testOnReturn\njboot.redis.testWhileIdle\njboot.redis.minEvictableIdleTimeMillis\njboot.redis.timeBetweenEvictionRunsMillis\njboot.redis.numTestsPerEvictionRun\njboot.redis.maxAttempts\njboot.redis.maxTotal\njboot.redis.maxIdle\njboot.redis.minIdle\njboot.redis.maxWaitMillis\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自定义序列化方案")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.serializer")]),t._v(" \n")])])]),s("h2",{attrs:{id:"redis的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的使用"}},[t._v("#")]),t._v(" Redis的使用")]),t._v(" "),s("p",[t._v("配置后，就可以通过如下代码获取 JbootRedis 对redis进行操作：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootRedis")]),t._v(" redis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jboot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRedis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nredis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 value1")]),t._v("\n")])])]),s("h2",{attrs:{id:"redis操作系列方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis操作系列方法"}},[t._v("#")]),t._v(" Redis操作系列方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("指令（方法）")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("set(Object key, Object value);")]),t._v(" "),s("td",[t._v("存放 key value 对到 redis，对于某个原本带有生存时间（TTL）的键来说， 当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。如果 key 已经持有其他值， SET 就覆写旧值，无视类型。")])]),t._v(" "),s("tr",[s("td",[t._v("setnx")]),t._v(" "),s("td",[t._v("当且仅当 key 不存在能成功设置")])]),t._v(" "),s("tr",[s("td",[t._v("setWithoutSerialize")]),t._v(" "),s("td",[t._v("存放 key value 对到 redis，不对value进行序列化，经常用在设置某些 数字或字符串类型的数据")])]),t._v(" "),s("tr",[s("td",[t._v("setex(Object key, int seconds, Object value)")]),t._v(" "),s("td",[t._v("存放 key value 对到 redis，并将 key 的生存时间设为 seconds (以秒为单位)")])]),t._v(" "),s("tr",[s("td",[t._v("get")]),t._v(" "),s("td",[t._v("返回 key 所关联的 value 值")])]),t._v(" "),s("tr",[s("td",[t._v("getWithoutSerialize")]),t._v(" "),s("td",[t._v("返回 key 所关联的 value 值，不对value近反序列化")])]),t._v(" "),s("tr",[s("td",[t._v("del(Object key)")]),t._v(" "),s("td",[t._v("删除给定的一个 key")])]),t._v(" "),s("tr",[s("td",[t._v("del(Object... keys)")]),t._v(" "),s("td",[t._v("删除给定的多个 key")])]),t._v(" "),s("tr",[s("td",[t._v("keys")]),t._v(" "),s("td",[t._v("查找所有符合给定模式 pattern 的 key，例如：KEYS h?llo 匹配 hello ， hallo 和 hxllo 等")])]),t._v(" "),s("tr",[s("td",[t._v("mset")]),t._v(" "),s("td",[t._v('同时设置一个或多个 key-value 对，例如：mset("k1", "v1", "k2", "v2")')])]),t._v(" "),s("tr",[s("td",[t._v("mget")]),t._v(" "),s("td",[t._v("返回所有(一个或多个)给定 key 的值")])]),t._v(" "),s("tr",[s("td",[t._v("decr")]),t._v(" "),s("td",[t._v("将 key 中储存的数字值减一")])]),t._v(" "),s("tr",[s("td",[t._v("decrBy(Object key, long longValue)")]),t._v(" "),s("td",[t._v("将 key 所储存的值减去减量 value")])]),t._v(" "),s("tr",[s("td",[t._v("incr")]),t._v(" "),s("td",[t._v("将 key 中储存的数字值增一")])]),t._v(" "),s("tr",[s("td",[t._v("incrBy(Object key, long value)")]),t._v(" "),s("td",[t._v("将 key 所储存的值加上增量 value")])]),t._v(" "),s("tr",[s("td",[t._v("exists")]),t._v(" "),s("td",[t._v("检查给定 key 是否存在")])]),t._v(" "),s("tr",[s("td",[t._v("randomKey")]),t._v(" "),s("td",[t._v("从当前数据库中随机返回(不删除)一个 key")])]),t._v(" "),s("tr",[s("td",[t._v("rename")]),t._v(" "),s("td",[t._v("将 key 改名为 newkey，当 newkey 已经存在时， RENAME 命令将覆盖旧值")])]),t._v(" "),s("tr",[s("td",[t._v("move")]),t._v(" "),s("td",[t._v("将当前数据库的 key 移动到给定的数据库 db 当中")])]),t._v(" "),s("tr",[s("td",[t._v("migrate")]),t._v(" "),s("td",[t._v("将 key 原子性地从当前实例传送到目标实例的指定数据库上")])]),t._v(" "),s("tr",[s("td",[t._v("select")]),t._v(" "),s("td",[t._v("切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值")])]),t._v(" "),s("tr",[s("td",[t._v("expire")]),t._v(" "),s("td",[t._v("为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除")])]),t._v(" "),s("tr",[s("td",[t._v("expireAt")]),t._v(" "),s("td",[t._v("expireAt 的作用和 expire 类似，都用于为 key 设置生存时间。不同在于 expireAt 命令接受的时间参数是 UNIX 时间戳(unix timestamp)")])]),t._v(" "),s("tr",[s("td",[t._v("pexpire")]),t._v(" "),s("td",[t._v("这个命令和 expire 命令的作用类似，但是它以毫秒为单位设置 key 的生存时间")])]),t._v(" "),s("tr",[s("td",[t._v("pexpireAt")]),t._v(" "),s("td",[t._v("这个命令和 expireAt 命令类似，但它以毫秒为单位设置 key 的过期 unix 时间戳")])]),t._v(" "),s("tr",[s("td",[t._v("getSet")]),t._v(" "),s("td",[t._v("将给定 key 的值设为 value ，并返回 key 的旧值(old value)")])]),t._v(" "),s("tr",[s("td",[t._v("persist")]),t._v(" "),s("td",[t._v("移除给定 key 的生存时间")])]),t._v(" "),s("tr",[s("td",[t._v("type")]),t._v(" "),s("td",[t._v("返回 key 所储存的值的类型")])]),t._v(" "),s("tr",[s("td",[t._v("ttl")]),t._v(" "),s("td",[t._v("以秒为单位，返回给定 key 的剩余生存时间")])]),t._v(" "),s("tr",[s("td",[t._v("pttl")]),t._v(" "),s("td",[t._v("这个命令类似于 TTL 命令，但它以毫秒为单位返回 key 的剩余生存时间")])]),t._v(" "),s("tr",[s("td",[t._v("objectRefcount")]),t._v(" "),s("td",[t._v("对象被引用的数量")])]),t._v(" "),s("tr",[s("td",[t._v("objectIdletime")]),t._v(" "),s("td",[t._v("对象没有被访问的空闲时间")])]),t._v(" "),s("tr",[s("td",[t._v("hset(Object key, Object field, Object value)")]),t._v(" "),s("td",[t._v("将哈希表 key 中的域 field 的值设为 value")])]),t._v(" "),s("tr",[s("td",[t._v("hmset(Object key, Map<Object, Object> hash)")]),t._v(" "),s("td",[t._v("同时将多个 field-value (域-值)对设置到哈希表 key 中")])]),t._v(" "),s("tr",[s("td",[t._v("hget(Object key, Object field)")]),t._v(" "),s("td",[t._v("返回哈希表 key 中给定域 field 的值")])]),t._v(" "),s("tr",[s("td",[t._v("hmget(Object key, Object... fields)")]),t._v(" "),s("td",[t._v("返回哈希表 key 中，一个或多个给定域的值")])]),t._v(" "),s("tr",[s("td",[t._v("hdel")]),t._v(" "),s("td",[t._v("删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略")])]),t._v(" "),s("tr",[s("td",[t._v("hexists")]),t._v(" "),s("td",[t._v("查看哈希表 key 中，给定域 field 是否存在")])]),t._v(" "),s("tr",[s("td",[t._v("hgetAll")]),t._v(" "),s("td",[t._v("返回哈希表 key 中，所有的域和值")])]),t._v(" "),s("tr",[s("td",[t._v("hvals")]),t._v(" "),s("td",[t._v("返回哈希表 key 中所有域的值")])]),t._v(" "),s("tr",[s("td",[t._v("hkeys")]),t._v(" "),s("td",[t._v("返回哈希表 key 中的所有域")])]),t._v(" "),s("tr",[s("td",[t._v("hlen")]),t._v(" "),s("td",[t._v("返回哈希表 key 中域的数量")])]),t._v(" "),s("tr",[s("td",[t._v("hincrBy(Object key, Object field, long value)")]),t._v(" "),s("td",[t._v("为哈希表 key 中的域 field 的值加上增量 value")])]),t._v(" "),s("tr",[s("td",[t._v("hincrByFloat")]),t._v(" "),s("td",[t._v("为哈希表 key 中的域 field 加上浮点数增量 value")])]),t._v(" "),s("tr",[s("td",[t._v("lindex")]),t._v(" "),s("td",[t._v("返回列表 key 中，下标为 index 的元素")])]),t._v(" "),s("tr",[s("td",[t._v("getCounter")]),t._v(" "),s("td",[t._v("获取记数器的值")])]),t._v(" "),s("tr",[s("td",[t._v("llen")]),t._v(" "),s("td",[t._v("返回列表 key 的长度")])]),t._v(" "),s("tr",[s("td",[t._v("lpop")]),t._v(" "),s("td",[t._v("移除并返回列表 key 的头元素")])]),t._v(" "),s("tr",[s("td",[t._v("lpush")]),t._v(" "),s("td",[t._v("将一个或多个值 value 插入到列表 key 的表头")])]),t._v(" "),s("tr",[s("td",[t._v("lset")]),t._v(" "),s("td",[t._v("将列表 key 下标为 index 的元素的值设置为 value")])]),t._v(" "),s("tr",[s("td",[t._v("lrem")]),t._v(" "),s("td",[t._v("根据参数 count 的值，移除列表中与参数 value 相等的元素")])]),t._v(" "),s("tr",[s("td",[t._v("lrange(Object key, long start, long end)")]),t._v(" "),s("td",[t._v("返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定")])]),t._v(" "),s("tr",[s("td",[t._v("ltrim")]),t._v(" "),s("td",[t._v("对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除")])]),t._v(" "),s("tr",[s("td",[t._v("rpop")]),t._v(" "),s("td",[t._v("移除并返回列表 key 的尾元素")])]),t._v(" "),s("tr",[s("td",[t._v("rpoplpush")]),t._v(" "),s("td",[t._v("命令 rpoplpush 在一个原子时间内，执行以下两个动作：1：将列表中的最后一个元素(尾元素)弹出，并返回给客户端。2：将弹出的元素插入到列表 ，作为列表的的头元素")])]),t._v(" "),s("tr",[s("td",[t._v("rpush")]),t._v(" "),s("td",[t._v("将一个或多个值 value 插入到列表 key 的表尾(最右边)")])]),t._v(" "),s("tr",[s("td",[t._v("blpop(Object... keys)")]),t._v(" "),s("td",[t._v("blpop 是列表的阻塞式(blocking)弹出原语")])]),t._v(" "),s("tr",[s("td",[t._v("blpop(Integer timeout, Object... keys)")]),t._v(" "),s("td",[t._v("blpop 是列表的阻塞式(blocking)弹出原语")])]),t._v(" "),s("tr",[s("td",[t._v("brpop(Object... keys)")]),t._v(" "),s("td",[t._v("列表的阻塞式(blocking)弹出原语")])]),t._v(" "),s("tr",[s("td",[t._v("brpop(Integer timeout, Object... keys)")]),t._v(" "),s("td",[t._v("列表的阻塞式(blocking)弹出原语")])]),t._v(" "),s("tr",[s("td",[t._v("ping")]),t._v(" "),s("td",[t._v("使用客户端向服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG")])]),t._v(" "),s("tr",[s("td",[t._v("sadd")]),t._v(" "),s("td",[t._v("将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略")])]),t._v(" "),s("tr",[s("td",[t._v("scard")]),t._v(" "),s("td",[t._v("返回集合 key 的基数(集合中元素的数量)")])]),t._v(" "),s("tr",[s("td",[t._v("spop")]),t._v(" "),s("td",[t._v("移除并返回集合中的一个随机元素")])]),t._v(" "),s("tr",[s("td",[t._v("smembers")]),t._v(" "),s("td",[t._v("返回集合 key 中的所有成员")])]),t._v(" "),s("tr",[s("td",[t._v("sismember")]),t._v(" "),s("td",[t._v("判断 member 元素是否集合 key 的成员")])]),t._v(" "),s("tr",[s("td",[t._v("sinter")]),t._v(" "),s("td",[t._v("返回多个集合的交集，多个集合由 keys 指定")])]),t._v(" "),s("tr",[s("td",[t._v("srandmember")]),t._v(" "),s("td",[t._v("返回集合中的一个随机元素")])]),t._v(" "),s("tr",[s("td",[t._v("srandmember")]),t._v(" "),s("td",[t._v("返回集合中的 count 个随机元素")])]),t._v(" "),s("tr",[s("td",[t._v("srem")]),t._v(" "),s("td",[t._v("移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略")])]),t._v(" "),s("tr",[s("td",[t._v("sunion")]),t._v(" "),s("td",[t._v("返回多个集合的并集，多个集合由 keys 指定")])]),t._v(" "),s("tr",[s("td",[t._v("sdiff")]),t._v(" "),s("td",[t._v("返回一个集合的全部成员，该集合是所有给定集合之间的差集")])]),t._v(" "),s("tr",[s("td",[t._v("zadd(Object key, double score, Object member)")]),t._v(" "),s("td",[t._v("将一个或多个 member 元素及其 score 值加入到有序集 key 当中")])]),t._v(" "),s("tr",[s("td",[t._v("zadd(Object key, Map<Object, Double> scoreMembers)")]),t._v(" "),s("td",[t._v("同上")])]),t._v(" "),s("tr",[s("td",[t._v("zcard")]),t._v(" "),s("td",[t._v("返回有序集 key 的基数")])]),t._v(" "),s("tr",[s("td",[t._v("zcount")]),t._v(" "),s("td",[t._v("返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量")])]),t._v(" "),s("tr",[s("td",[t._v("zincrby")]),t._v(" "),s("td",[t._v("为有序集 key 的成员 member 的 score 值加上增量 increment")])]),t._v(" "),s("tr",[s("td",[t._v("zrange")]),t._v(" "),s("td",[t._v("返回有序集 key 中，指定区间内的成员")])]),t._v(" "),s("tr",[s("td",[t._v("zrevrange")]),t._v(" "),s("td",[t._v("返回有序集 key 中，指定区间内的成员")])]),t._v(" "),s("tr",[s("td",[t._v("zrangeByScore")]),t._v(" "),s("td",[t._v("返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员")])]),t._v(" "),s("tr",[s("td",[t._v("zrank")]),t._v(" "),s("td",[t._v("返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列")])]),t._v(" "),s("tr",[s("td",[t._v("zrevrank")]),t._v(" "),s("td",[t._v("返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序")])]),t._v(" "),s("tr",[s("td",[t._v("zrem")]),t._v(" "),s("td",[t._v("移除有序集 key 中的一个或多个成员，不存在的成员将被忽略")])]),t._v(" "),s("tr",[s("td",[t._v("zscore")]),t._v(" "),s("td",[t._v("返回有序集 key 中，成员 member 的 score 值")])]),t._v(" "),s("tr",[s("td",[t._v("publish(String channel, String message)")]),t._v(" "),s("td",[t._v("发布一条消息")])]),t._v(" "),s("tr",[s("td",[t._v("publish(byte[] channel, byte[] message)")]),t._v(" "),s("td",[t._v("发布一条消息")])]),t._v(" "),s("tr",[s("td",[t._v("subscribe(JedisPubSub listener, final String... channels)")]),t._v(" "),s("td",[t._v("订阅消息")])]),t._v(" "),s("tr",[s("td",[t._v("subscribe(BinaryJedisPubSub binaryListener, final byte[]... channels)")]),t._v(" "),s("td",[t._v("订阅消息")])])])]),t._v(" "),s("h2",{attrs:{id:"redis扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis扩展"}},[t._v("#")]),t._v(" Redis扩展")]),t._v(" "),s("p",[t._v("JbootRedis 是通过 "),s("code",[t._v("jedis")]),t._v(" 或者 "),s("code",[t._v("JedisCluster")]),t._v(" 进行操作的，如果想扩展自己的方法。可以直接获取 "),s("code",[t._v("jedis")]),t._v(" （或"),s("code",[t._v("JedisCluster")]),t._v(") 对 Redis 进行操作，获取  "),s("code",[t._v("jedis")]),t._v("（或"),s("code",[t._v("JedisCluster")]),t._v(") 的代码如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootRedis")]),t._v(" redis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jboot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("me")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReids")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//单机模式下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootJedisImpl")]),t._v(" redisImpl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootJedisImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jedis")]),t._v(" jedis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redisImpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getJedis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//集群模式下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootJedisClusterImpl")]),t._v(" redisImpl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JbootJedisClusterImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JedisCluster")]),t._v(" jedis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redisImpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getJedisCluster")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"redis集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis集群"}},[t._v("#")]),t._v(" Redis集群")]),t._v(" "),s("p",[t._v("在单机模式下，配置文件如下：")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("127.0.0.1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("xxxx")]),t._v("\n")])])]),s("p",[t._v("在集群模式下，只需要在 jboot.redis.host 配置为多个主机即可，例如：")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 多个IP用英文逗号隔开，端口号用英文冒号（:）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("Jboot.redis.host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("192.168.1.33,192.168.1.34:3307,192.168.1.35")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("jboot.redis.password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("xxxx")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);